package plantas;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;

import recursos.Imagen;
import recursos.Render;

public abstract class Planta {

	private String nombre;
	private int coste;
	private int vida;
	private int cooldown;
	private float tiempoRecarga = 0f;
	private int damage;
	
	private Imagen imagen;
	
	private Animation<TextureRegion> animation;
	private TextureRegion frameActual;
	private TextureRegion[] regions;
	private float tiempoAnimacion;
	private Texture textura;
	public int animationX;
	public int animationY;
    
    private boolean animacionPausada;
    private Imagen noCargado;
    private Imagen sinSolesSuficientes;
	
	
	public Planta(String nombre, int coste, int vida, int cooldown, int damage) {
		this.nombre = nombre;
		this.coste = coste;
		this.vida = vida;
		this.cooldown = cooldown;
		this.damage = damage;
		this.animationX = 0;
		this.animationY = 0;
	}
	
	public void dibujar() {
		imagen.dibujar();
		noCargado.dibujar();
		sinSolesSuficientes.dibujar();
		animacionRecarga();

	}
	
    public void animacionIddle() {
        if (!animacionPausada) {
            tiempoAnimacion += Gdx.graphics.getDeltaTime(); // Acumula el delta time
            frameActual = animation.getKeyFrame(tiempoAnimacion, true);
        }
        Render.batch.begin();
        Render.batch.draw(frameActual, animationX, animationY);
        Render.batch.end();
    }
    
    public boolean reproducirCooldown() {
    	if(tiempoRecarga < cooldown) {
    		tiempoRecarga += Render.getDeltaTime();
    		return false;
    	} else {
    		noCargado.setAlpha(0f);
    		return true;
    	}
    }
    
    public void reiniciarCooldown() {
    	noCargado.setAlpha(0.5f);
    	tiempoRecarga = 0f;
    }
    
    public boolean cooldownFinalizado() {
    	if(tiempoRecarga < cooldown) {
    		return false;
    	} else {
    		return true;
    	}
    }
	
	public int getCoste() {
		return coste;
	}
	
	public String getNombre() {
		return nombre;
	}
	
	public float getTiempoRecarga() {
		return tiempoRecarga;
	}
	
	public void setImagen(String ruta, int ancho, int alto) {
		imagen = new Imagen(ruta, ancho, alto);
		noCargado = new Imagen("img/black.png", ancho, alto);
		sinSolesSuficientes = new Imagen("img/black.png", ancho, alto);
		noCargado.setAlpha(0.5f);
		sinSolesSuficientes.setAlpha(0.5f);
	}
	
	public void setNoCargadoYSinSoles(int x, int y, int ancho, int alto) {
		noCargado.setPosition(x, y + (alto/2));
		noCargado.setSize(ancho, alto/2);
		sinSolesSuficientes.setPosition(x, y);
		sinSolesSuficientes.setSize(ancho, alto);
	}
	
	public void solesSuficientes(int cantSoles) {
		if(cantSoles >= this.coste) {
			sinSolesSuficientes.setAlpha(0f);
		} else {
			sinSolesSuficientes.setAlpha(0.5f);
		}
	}
	
	public void animacionRecarga() {
		noCargado.setPosition(noCargado.getX(), noCargado.getY() - 1);
		noCargado.setSize(noCargado.getAncho(), noCargado.getAlto() + 1);
	}
	
	public void setAnimacion(String ruta, int cantidadFrames, float velocidadFrames) {
		textura = new Texture(ruta);
		TextureRegion[][] temp = TextureRegion.split(textura, textura.getWidth()/cantidadFrames, textura.getHeight());
		
		regions = new TextureRegion[cantidadFrames];
		for (int i = 0; i < regions.length; i++) {
			regions[i] = temp[0][i];
		}
		animation = new Animation<TextureRegion>(velocidadFrames, regions);
		tiempoAnimacion = 0f;
	}
	
    public void pausarAnimacionEnFrame(int frameIndex) {
        if (frameIndex >= 0 && frameIndex < regions.length) {
            animacionPausada = true;
            frameActual = regions[frameIndex];
        }
    }

    public void reanudarAnimacion() {
        animacionPausada = false;
    }
	
	public void setSize(int ancho, int alto) {
		imagen.setSize(ancho, alto);
	}
	
	public void setX(int x) {
		imagen.setX(x);
	}
	
	public void setY(int y) {
		imagen.setY(y);
	}
	
	public void disponibleAlInicio() {
		this.tiempoRecarga = cooldown;
	}
	
	public void dispose() {
		
		// Imagenes
		imagen.dispose();
		textura.dispose();
		
	}
	
}
