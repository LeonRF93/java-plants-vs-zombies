package pantallas;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.lionstavern.pvz.PvzPrincipal;

import hud.Hud;
import mapas.Mapa;
import plantas.Girasol;
import plantas.Lanzaguisantes;
import plantas.Nuez;
import plantas.Planta;
import recursos.Entradas;
import recursos.Globales;
import recursos.Imagen;
import recursos.Render;
import recursos.Texto;
import solesCerebros.Sol;

public class Partida implements Screen {

	private PvzPrincipal principal;
	private ScreenManager screenMg;

	// Audio
	public Music selector;
	private Sound pausa = Gdx.audio.newSound(Gdx.files.internal("audio/pause.mp3"));;
	private boolean unaVezPausa;
	private Sound bleep = Gdx.audio.newSound(Gdx.files.internal("audio/bleep.mp3"));

	// Plantas y casillas
	private int casillasX = 230, casillasY = 380;

	private Planta[] plantas = { new Lanzaguisantes(), new Nuez(), new Girasol() };
//	private Planta[] plantas = { new Lanzaguisantes(), new Nuez()};
//	private Planta[] plantas = { new Girasol()};
	
	// Camara

	private OrthographicCamera camara;

	// Animacion de la camara inicial
	private int tiempoAnimacion;
	private float acelCamara = 1f;
	private float restarVolumen;
	private boolean unaVezCamaraInicial;
	private boolean finCamaraInicial;

	// Camara del hud
	private OrthographicCamera camaraHud;
	private float xCamara = Render.ANCHO / 2, yCamara = Render.ALTO / 2;

	// Pausa

	public static boolean pausaActiva;
	private Imagen pausaImg;
	private Imagen menuBoton;
	private Recntagle areaMenuBoton;
	private Imagen[] botonPausa = new Imagen[2];
	private Rectangle[] areaBotonPuasa = new Rectangle[4];
	private boolean[] sfxMusic = new boolean[2];
	private boolean[] unaVezBotones = new boolean[4];

	// Otros

	private Hud hud;
	private Texto fuente;

	private Mapa dia;

	private Sol sol;

	public Partida(PvzPrincipal principal) {
		this.principal = principal;
		screenMg = new ScreenManager(principal);
	}

	@Override
	public void show() {

		Gdx.input.setInputProcessor(new Entradas());
		
		Hud.cantSoles = 50;
		
		// La imagen del fondo toma el ANCHO y el ALTO del Render.
		// Le sumamos 300 al ANCHO para ajustar la imagen no se vea estirada
		Imagen imgDia = new Imagen("img/escenarios/dia.png", Render.ANCHO + 300, Render.ALTO);

		Music mscDia = Gdx.audio.newMusic(Gdx.files.internal("audio/Day-Stage_.mp3"));
		int filas = 5, columnas = 9;
		Vector2 alineacionGrilla = new Vector2(casillasX, casillasY);

		dia = new Mapa("Día", imgDia, mscDia, filas, columnas, alineacionGrilla);

		camara = new OrthographicCamera(Render.ANCHO, Render.ALTO);
		camara.position.set(Render.ANCHO / 2, Render.ALTO / 2, 0);
		camaraHud = new OrthographicCamera(Render.ANCHO, Render.ALTO);
		camaraHud.position.set(Render.ANCHO / 2, Render.ALTO / 2, 0);

		selector = Gdx.audio.newMusic(Gdx.files.internal("audio/Choose-Your-Seeds.mp3"));

		restarVolumen = selector.getVolume();
		selector.setLooping(true);

		hud = new Hud(plantas);

		fuente = new Texto("fonts/Minecraft.ttf", 80, Color.WHITE, true);
		fuente.texto = "";
		fuente.x = 100;
		fuente.y = 100;

		sol = new Sol();

		pausaImg = new Imagen("img/hud/pausa.png", 406, 348);
		pausaImg.setPosition(300, 110);
		menuBoton = new Imagen("img/hud/menu.png", 132, 36);
		menuBoton.setPosition(Render.ANCHO - 132 - 5 , Render.ALTO - 36);
		botonPausa[0] = new Imagen("img/hud/pausaboton.png", 33, 33);
		botonPausa[0].setPosition(554, 304);
		botonPausa[1] = new Imagen("img/hud/pausaboton.png", 33, 33);
		botonPausa[1].setPosition(554, 275);

		areaBotonPuasa[0] = new Rectangle(554, 304, 33, 33);
		areaBotonPuasa[1] = new Rectangle(554, 275, 33, 33);
		areaBotonPuasa[2] = new Rectangle(404, 228, 203, 40);
		areaBotonPuasa[3] = new Rectangle(344, 130, 320, 70);
	}

	@Override
	public void render(float delta) {

		camara.update();
//		Render.limpiarPantalla(0, 0, 0, 1);
		ajustarVolumen();

		if (!finCamaraInicial) {
			camaraInicial(false); // cambiar el valor del booleano para que aparezca o no la camara inicial
		}

		// Capa del fondo

		Render.batch.setProjectionMatrix(camara.combined);
		Render.batch.begin();

		dia.getFondo().dibujar();

		Render.batch.end();

		// Capa del hud, para que no se vea por encima de las plantas

		camaraHud.update();
		Render.batch.setProjectionMatrix(camaraHud.combined);

		Render.batch.begin();

		menuBoton.dibujar();
		hud.mostrarHud();
		Render.batch.end();

		// Capa de Plantas y soles

		dia.correr();

		Render.batch.setProjectionMatrix(camara.combined);
		Render.batch.begin();

		sol.dibujar();

		if (!pausaActiva && finCamaraInicial) {

			if (finCamaraInicial) {
				hud.clickearPlanta();
				sol.caer();
				sol.clickear();
			}

		}

		Render.batch.end();

		// Capa de pausa

		camaraHud.update();
		Render.batch.setProjectionMatrix(camaraHud.combined);
		Render.batch.begin();

		pausar();

		Render.batch.end();

	}

	private void pausar() {

		if (pausaActiva) {
			if (!unaVezPausa) {
				pausa.play(Globales.volumenSfx);
				if (finCamaraInicial) {
					dia.pausarMusica();
				}
				unaVezPausa = true;
			}
			menuPausa();
			dia.pausar();

			// boton back to game el cual tendría que ir adentro del menuPausa() pero
			// creeme, creeme que no queres hacer eso
			if (areaBotonPuasa[3].contains(Entradas.getMouseX(), Entradas.getMouseY())) {
				if (Entradas.getBotonMouse() == 0) {
					pausaActiva = false;
				}
			}
		} else {
			if (unaVezPausa) {
				pausa.play(Globales.volumenSfx);
				if (finCamaraInicial) {
					dia.playMusica();
				}
				unaVezPausa = false;
			}
			dia.reanudar();
		}

	}

	private void menuPausa() {
		pausaImg.dibujar();

		for (int i = 0; i < areaBotonPuasa.length - 2; i++) { // le restamos 2 xq los ultimos dos botones se  trabajan
																// aparte y asi no tenemos problemas con los arrays
																// boleanos que no tienen una longitud mayor a 2
			if (areaBotonPuasa[i].contains(Entradas.getMouseX(), Entradas.getMouseY())) {
				if (Entradas.getBotonMouse() == 0) {
					if (!unaVezBotones[i]) {
						sfxMusic[i] = !sfxMusic[i];
						
						// boton de activado o desactivado de sonidos
						if (i == 1) {
							Globales.sfxOn = !Globales.sfxOn;
						}
						
						// boton de activado o desactivado de musica
						if (i == 0) {
							Globales.musicaOn = !Globales.musicaOn;
						}
						bleep.play(Globales.volumenSfx);
						unaVezBotones[i] = true;
					}
				} else {
					unaVezBotones[i] = false;
				}
			}

		}
		
		if(!Globales.musicaOn) {
			botonPausa[0].dibujar();
		}
		if(!Globales.sfxOn) {
			botonPausa[1].dibujar();
		}

		// boton main menu
		if (areaBotonPuasa[2].contains(Entradas.getMouseX(), Entradas.getMouseY())) {
			if (Entradas.getBotonMouse() == 0) {
				pausaActiva = false;
				screenMg.setMenu();
				PantallaInicio.musica.play();
				if(Globales.musicaOn) {
					PantallaInicio.musica.setVolume(0f);
				}
				screenMg.disposePartida(this);

			}
		}

	}

	private void ajustarVolumen() {

		if (Globales.musicaOn) {
			dia.desmutearMusica();
		} else {
			dia.mutearMusica();
			selector.stop();
		}

		if (Globales.sfxOn) {
			Globales.volumenSfx = 1f;
		} else {
			Globales.volumenSfx = 0f;
		}

	}

	private boolean camaraInicial(boolean onOff) {

		if (!onOff) {
			if (!unaVezCamaraInicial) {
				dia.playMusica();
				finCamaraInicial = true;
				unaVezCamaraInicial = true;
			}
			return false;
		}

		if (!unaVezCamaraInicial) {
			selector.play();
			unaVezCamaraInicial = true;
		}

		if (pausaActiva) {
			selector.stop();
		}

		if (tiempoAnimacion == 0) {
			if (camara.position.x < Render.ANCHO - 400) {
				camara.position.x += acelCamara;
				acelCamara += 0.1f;
			}
			if (camara.position.x < Render.ANCHO - 200 && camara.position.x >= 560) {
				acelCamara += 0.2f;
				camara.position.x += acelCamara;
			}
		}

		if (camara.position.x >= 760 && tiempoAnimacion < 150) {
			tiempoAnimacion += 1;
			acelCamara = 0.1f;
		}
		if (tiempoAnimacion == 150) {
			if (camara.position.x > Render.ANCHO / 2 + 10) {
				acelCamara += 0.2f;
				restarVolumen -= 0.01f;
				selector.setVolume(restarVolumen);
				camara.position.x -= acelCamara;
			} else {
				tiempoAnimacion = 151;
			}
		}

		if (tiempoAnimacion == 151) {
			selector.stop();
			selector.dispose();
			tiempoAnimacion++;
		}
		if (tiempoAnimacion >= 152 && tiempoAnimacion < 200) {
			tiempoAnimacion++;
		}
		if (tiempoAnimacion == 200) {
			dia.playMusica();
			finCamaraInicial = true;
		}
		return true;
	}

	// ----- OVERRIDES ----- //

	@Override
	public void resize(int width, int height) {
		// TODO Auto-generated method stub

	}

	@Override
	public void pause() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub

	}

	@Override
	public void hide() {
		// TODO Auto-generated method stub

	}

	@Override
	public void dispose() {

		// Audio

		// Imagenes
		pausaImg.dispose();
		for (int i = 0; i < botonPausa.length; i++) {
			botonPausa[i].dispose();
		}

		// Otros
		hud.dispose();

	}

}
